class Solution {
    
    public static void Merge(int[][] intervals, int left, int right, int middle){
        int llen = middle-left+1;
        int rlen = right-middle;
        int len = right-left+1;
        int[][] ans = new int[len][2];
        int i=left;
        int j=middle+1;
        int k=0;
        while(i<=middle && j<=right){
            if(intervals[i][0] <= intervals[j][0]){
                ans[k] = intervals[i];
                i++;
                k++;
            }
            else{
                ans[k] = intervals[j];
                j++;
                k++;
            }
        }
        if(i<=middle){
            while(i<=middle){
                ans[k] = intervals[i];
                i++;
                k++;
            }
        }
        if(j<=right){
            while(j<=right){
                ans[k] = intervals[j];
                j++;
                k++;
            }
        }
        for(int p=0;p<len;p++){
            intervals[p+left] = ans[p];
        }
    }

    public static void MergeSort(int[][] intervals, int left, int right){
        if(left != right){
            int middle = (left+right)/2;
            MergeSort(intervals, left, middle);
            MergeSort(intervals, middle+1, right);
            Merge(intervals, left, right, middle);
            return;
        }else{
            return;
        }
    }
    
    public int minMeetingRooms(int[][] intervals) {
        int ans = 0;
        MergeSort(intervals, 0, intervals.length-1);
        ArrayList<int[]> list = new ArrayList<>();
        for(int i=0; i<intervals.length; i++){
            list.add(intervals[i]);
        }
        while(list.size() != 0){
            ans++;
            int last=list.get(0)[1];
            list.remove(0);
            if(list.size() == 0){
                break;
            }else{
                for(int i=0; i<list.size(); i++){
                    if(list.get(i)[0] >= last){
                        last=list.get(i)[1];
                        list.remove(i);
                        i--;
                    }
                }
            }           
        }
        return ans;
    }
}
